#!/usr/bin/env bash

# TODO: this file is missing improvements that exists its siblings

# see https://stackoverflow.com/a/246128/5354298
get_script_dir() { echo "$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"; }
SCRIPT_DIR=$(get_script_dir)
LATEST_GPML_VERSION="2013a"

cleanup() {
  echo "done" > /dev/null
}

# Based on http://linuxcommand.org/lc3_wss0140.php
# and https://codeinthehole.com/tips/bash-error-reporting/
PROGNAME=$(basename $0)
error_exit() {
#	----------------------------------------------------------------
#	Function for exit due to fatal program error
#		Accepts 1 argument:
#			string containing descriptive error message
#	----------------------------------------------------------------


  #echo "${PROGNAME}: ${1:-"Unknown Error"}" 1>&2
  if [ ! "$1" ]; then
    echo "${PROGNAME}: Unknown Error" 1>&2
    read line file <<<$(caller)
    echo "An error occurred in line $line of file $file:" 1>&2
    sed "${line}q;d" "$file" 1>&2
  else
    echo "${PROGNAME}: $1" 1>&2
  fi

  cleanup
  exit 1
}

trap error_exit ERR
trap cleanup EXIT INT QUIT TERM

TOP_OPTS=$(getopt -o hv: --long help,version:,id:,pathway-version: \
             -n 'gpml2' -- "$@")
if [ $? != 0 ] ; then error_exit "Error: Failed to parse options." ; fi
# NOTE: keep the quotes
eval set -- "$TOP_OPTS"

HELP=false
VERSION=false
while true; do
  case "$1" in
    -h | --help ) HELP=true; shift ;;
    -v | --version ) VERSION=true; shift ;;
    -- ) shift; break ;;
    * ) break ;;
  esac
done

if [ $VERSION == true ]; then
  jq '.version' "$SCRIPT_DIR/../extension.json"
  exit 0
elif [ $HELP == true ]; then
  echo 'usage: metabolite-patterns --version'
  echo '       metabolite-patterns --help'
  echo '       metabolite-patterns <input> [output]'
  echo ' '
  echo 'metabolite-pattern WP1.json'
  exit 0
fi

json_f="$1"

if [ ! -f "$json_f" ]; then
  error_exit "Missing file '"$json_f"'"
fi

dir_out=$(dirname "$json_f")
base_out=$(basename -- "$json_f")
ext_out="${base_out##*.}"
stub_out="${base_out%.*}"

css_out="$dir_out/$stub_out.metabolite-patterns.css"
svg_out="$dir_out/$stub_out.metabolite-patterns.svg"

if [ -e "$svg_out" ] && [ -e "$css_out" ]; then
  echo "$svg_out and "$css_out" already exist. To overwrite, delete them and try again."
  exit 0
fi

if [ -f "$svg_out" ]; then
  error_exit "File already exists: '"$svg_out"'"
else
  echo '<svg><defs></defs></svg>' > "$svg_out"
fi

if [ -e "$css_out" ]; then
  error_exit "File already exists: '"$css_out"'"
fi

for metabolite_data in $(jq -c '[.entitiesById[] | select(.type | contains(["Metabolite"]))] | unique_by(.type)[] | {xrefDataSource, xrefIdentifier, type}' "$json_f"); do
  data_source=$(echo $metabolite_data | jq -r .xrefDataSource);
  identifier=$(echo $metabolite_data | jq -r .xrefIdentifier);
  wikidata_identifier=$(echo $metabolite_data | jq -r '[.type[] | select(startswith("wikidata:"))][0]' | sed 's/wikidata://');
  smiles=$(curl -Ls "http://webservice.bridgedb.org/Human/attributes/$data_source/$identifier?attrName=SMILES")
  cdkdepict_url="http://www.simolecule.com/cdkdepict/depict/bow/svg?smi=$smiles&abbr=on&hdisp=bridgehead&showtitle=false&zoom=1.0&annotate=none"
  cdkdepict_out="$dir_out/$identifier.cdkdepict.svg"

  # TODO: try the alternate BridgeDb URL for HMDB

  if [ ! -e "$cdkdepict_out" ]; then
    curl -Ls --get \
       --data-urlencode "smi=$smiles" \
       --data-urlencode 'abbr=on' \
       --data-urlencode 'hdisp=bridgehead' \
       --data-urlencode 'showtitle=false' \
       --data-urlencode 'zoom=1.0' \
       --data-urlencode 'annotate=none' \
      'http://www.simolecule.com/cdkdepict/depict/bow/svg' \
    > "$cdkdepict_out"
  fi

  base64data=$(uuencode -m "$cdkdepict_out" remotename | sed '1d;$d')
  cdkdepict_data_url='data:image/svg+xml;base64,'"$base64data"
  
  cat >> "$css_out" <<EOF
[typeof~="wikidata:$wikidata_identifier"]:hover > .Icon {
  cursor: default;
  fill: url(#Pattern$wikidata_identifier);
  transform-box: fill-box;
  transform: scale(2, 3);
  transform-origin: 50% 50%;
}
[typeof~="wikidata:$wikidata_identifier"]:hover > .Text {
  font-size: 0px;
}
EOF

#  "$css_out" <<EOF
#[typeof~=wikidata:$wikidata_identifier]:hover > .Icon {
#  cursor: default;
#  fill: url(#Pattern$wikidata_identifier);
#  transform-box: fill-box;
#  transform: scale(2, 3);
#  transform-origin: 50% 50%;
#}
#[typeof~=wikidata:$wikidata_identifier]:hover > .Text {
#  font-size: 0px;
#}
#EOF

  # TODO: do we want to disable the clip-path on hover?
  #[typeof~=wikidata:$wikidata_identifier]:hover > .Icon {
  #  clip-path: unset;
  #  rx: unset;
  #  ry: unset;
  #  cursor: default;
  #  fill: url(#Pattern$wikidata_identifier);
  #  transform-box: fill-box;
  #  transform: scale(2, 3);
  #  transform-origin: 50% 50%;
  #}
  
  #  "transform-box: fill-box" is needed for FF.
  #  https://bugzilla.mozilla.org/show_bug.cgi?id=1209061

  xmlstarlet ed -L \
                    -s "/svg/defs" -t elem -n "pattern" -v "" \
      		    --var prevpattern '$prev' \
                    -s '$prevpattern' -t elem -n "image" -v "" \
      		    --var previmage '$prev' \
                    -i '$prevpattern' -t attr -n "id" -v "Pattern$wikidata_identifier" \
                    -i '$prevpattern' -t attr -n "width" -v "100%" \
                    -i '$prevpattern' -t attr -n "height" -v "100%" \
                    -i '$prevpattern' -t attr -n "patternContentUnits" -v "objectBoundingBox" \
                    -i '$prevpattern' -t attr -n "preserveAspectRatio" -v "none" \
                    -i '$prevpattern' -t attr -n "viewBox" -v "0 0 1 1" \
                    -i '$previmage' -t attr -n "width" -v "1" \
                    -i '$previmage' -t attr -n "height" -v "1" \
                    -i '$previmage' -t attr -n "href" -v "$cdkdepict_data_url" \
                    -i '$previmage' -t attr -n "preserveAspectRatio" -v "none" \
  		  "$svg_out"
done
 
exit 0
